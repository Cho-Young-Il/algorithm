#include <iostream>

using namespace std;

char num[100];
int table[100][100];
int C;

void dataInput(){
	cin >> num;
}

int table_dfs(int left, int right){
	
	int sum = 0, add = 0, ret = 0;
	bool isZero = true;
	int& curTable = table[left][right];

	if (curTable != 0){
		if (curTable > 0) C += curTable;
		return curTable;
	}

	if (num[left] == '0') {
		curTable = -1;
		return -1;
	}

	if (left == right) {
		C++;
		curTable = 1;
		return 1;
	}

	ret = table_dfs(left + 1, right);

	if (ret > 0) isZero = false;
	else ret = 0;

	add += ret;

	sum = (num[left] - '0') * 10;
	sum += (num[left + 1] - '0');
	
	if (sum <= 34) {
		if (right - left > 1) {
			ret = table_dfs(left + 2, right);
			
			if (ret > 0) isZero = false;
			else ret = 0;
			
			add += ret;
		}
		else if (right - left == 1)	{
			C++;
			add++;
		}
	}

	if (isZero) add = -1;
	
	curTable = add;

	return curTable;
}

void simple_dfs(int left, int right){
	int sum = 0;
	if (num[left] == '0') return;
	if (left == right) {
		C++;
		return;
	}
	simple_dfs(left + 1, right);
	sum = (num[left] - '0') * 10;
	sum += (num[left + 1] - '0');
	if (sum <= 34) {
		if (right - left > 1) {
			simple_dfs(left + 2, right);
		}
		else if (right - left == 1)	{
			C++;
		}
	}
}

int myStrLen(char input[]){
	int ret = -1;
	for (int i = 0; i < 50; i++) {
		if (input[i] == '\0'){
			ret = i;
			break;
		}
	}
	return ret;
}

void process() {
	int len = myStrLen(num) - 1;
	table_dfs(0, len);
}

void printResult(){
	cout << C << endl;
}

int main() {
	dataInput();
	process();
	printResult();
	return 0;
}