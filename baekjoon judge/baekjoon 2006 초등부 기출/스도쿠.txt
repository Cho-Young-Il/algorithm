#include <iostream>

using namespace std;

typedef struct PointTypeNode {
	int r;
	int c;
}PointNode;

int data[10][10];
int row_chk[10][10], col_chk[10][10];
int square_num[10][10], square_chk[10][10], square_cnt;
PointNode zero_point[110];
int zero_cnt;

void initTable() {
	for (int i = 1; i <= 9; i ++) {
		for (int j = 1; j <= 9; j ++) {
			square_num[i][j] = ((i - 1) / 3) * 3 + (j - 1) / 3 + 1;
		}
	}
}

void dataInput() {

	for (int i = 1; i <= 9; i++) {
		for (int j = 1; j <= 9; j++) {
			int num;
			cin >> num;
			data[i][j] = num;
			if (num) {
				row_chk[i][num] = 1;
				col_chk[j][num] = 1;
				int sTag = square_num[i][j];
				square_chk[sTag][num] = 1;
			}
			else {
				zero_cnt++;
				zero_point[zero_cnt].r = i;
				zero_point[zero_cnt].c = j;
			}
		}
	}
}

void printResult() {
	for (int i = 1; i <= 9; i++) {
		for (int j = 1; j <= 9; j++) {
			cout << data[i][j] << " ";
		}
		cout << endl;
	}
}

bool dfs(int point) {
	if (point == zero_cnt) {
		return true;
	}
	
	int r = zero_point[point + 1].r;
	int c = zero_point[point + 1].c;
	
	for (int i = 1; i <= 9; i++) {

		int sTag = square_num[r][c];

		int& rChk = row_chk[r][i];
		int& cChk = col_chk[c][i];
		int& sChk = square_chk[sTag][i];

		if (!rChk && !cChk && !sChk) {
			rChk = cChk = sChk = 1;
			data[r][c] = i;
			if(dfs(point + 1)) 
				return true;
			data[r][c] = rChk = cChk = sChk = 0;
		}
	}

	return false;
}

void process() {
	dfs(0);
}

int main() {
	initTable();
	dataInput();
	process();
	printResult();
	return 0;
}